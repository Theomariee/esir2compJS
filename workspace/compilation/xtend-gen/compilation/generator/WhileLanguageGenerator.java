/**
 * generated by Xtext 2.15.0
 */
package compilation.generator;

import com.google.common.collect.Iterables;
import compilation.whileLanguage.Affectation;
import compilation.whileLanguage.Command;
import compilation.whileLanguage.Commands;
import compilation.whileLanguage.Definition;
import compilation.whileLanguage.For;
import compilation.whileLanguage.Foreach;
import compilation.whileLanguage.Function;
import compilation.whileLanguage.If;
import compilation.whileLanguage.Nop;
import compilation.whileLanguage.Program;
import compilation.whileLanguage.While;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class WhileLanguageGenerator extends AbstractGenerator {
  public final static int INDENT_ALL = 0;
  
  public final static int INDENT_FOR = 1;
  
  public final static int INDENT_WHILE = 2;
  
  public final static int INDENT_IF = 3;
  
  public final static int INDENT_FOREACH = 4;
  
  public final static Integer DEFAULT_ALL = Integer.valueOf(2);
  
  public final static Integer DEFAULT_FOR = Integer.valueOf((-1));
  
  public final static Integer DEFAULT_WHILE = Integer.valueOf((-1));
  
  public final static Integer DEFAULT_IF = Integer.valueOf((-1));
  
  public final static Integer DEFAULT_FOREACH = Integer.valueOf((-1));
  
  private String indentAll = "";
  
  private String indentFor = "";
  
  private String indentWhile = "";
  
  private String indentIf = "";
  
  private String indentForeach = "";
  
  private int i;
  
  private List<Integer> indentations = new ArrayList<Integer>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    WhileLanguageGenerator.init(this.indentations);
    this.doGenerate(resource, fsa, context, "output", this.indentations);
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final String output, final List<Integer> indentations) {
    this.indentations = indentations;
    this.calcIndent(this.indentations);
    System.out.println(indentations);
    Iterable<Program> _filter = Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Program.class);
    for (final Program e : _filter) {
      boolean _equals = output.equals("");
      if (_equals) {
        System.out.println(this.compile(e));
      } else {
        fsa.generateFile(output, this.compile(e));
      }
    }
  }
  
  public CharSequence compile(final Program p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Function> _functions = p.getFunctions();
      for(final Function f : _functions) {
        CharSequence _compile = this.compile(f);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Function f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function ");
    String _name = f.getName();
    _builder.append(_name);
    _builder.append(" :");
    _builder.newLineIfNotEmpty();
    CharSequence _compile = this.compile(f.getDefinition());
    _builder.append(_compile);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Definition d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("read ");
    {
      EList<String> _variable = d.getRead().getVariable();
      boolean _hasElements = false;
      for(final String vr : _variable) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append(vr);
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    CharSequence _compile = this.compile(d.getCommands(), this.indentAll);
    _builder.append(_compile);
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    _builder.append("write ");
    {
      EList<String> _variable_1 = d.getWrite().getVariable();
      boolean _hasElements_1 = false;
      for(final String vw : _variable_1) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append(vw);
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Commands c, final String indent) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Command> _commands = c.getCommands();
      boolean _hasElements = false;
      for(final Command command : _commands) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(" ;", "");
        }
        CharSequence _compile = this.compile(command);
        String _plus = (indent + _compile);
        _builder.append(_plus);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Command c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _command = c.getCommand();
      if ((_command instanceof Nop)) {
        _builder.append("nop");
        _builder.newLine();
      } else {
        EObject _command_1 = c.getCommand();
        if ((_command_1 instanceof If)) {
          EObject _command_2 = c.getCommand();
          CharSequence _compile = this.compile(((If) _command_2));
          _builder.append(_compile);
          _builder.newLineIfNotEmpty();
        } else {
          EObject _command_3 = c.getCommand();
          if ((_command_3 instanceof Affectation)) {
            EObject _command_4 = c.getCommand();
            CharSequence _compile_1 = this.compile(((Affectation) _command_4));
            _builder.append(_compile_1);
            _builder.newLineIfNotEmpty();
          } else {
            EObject _command_5 = c.getCommand();
            if ((_command_5 instanceof While)) {
              EObject _command_6 = c.getCommand();
              CharSequence _compile_2 = this.compile(((While) _command_6));
              _builder.append(_compile_2);
              _builder.newLineIfNotEmpty();
            } else {
              EObject _command_7 = c.getCommand();
              if ((_command_7 instanceof For)) {
                EObject _command_8 = c.getCommand();
                CharSequence _compile_3 = this.compile(((For) _command_8));
                _builder.append(_compile_3);
                _builder.newLineIfNotEmpty();
              } else {
                EObject _command_9 = c.getCommand();
                if ((_command_9 instanceof Foreach)) {
                  EObject _command_10 = c.getCommand();
                  CharSequence _compile_4 = this.compile(((Foreach) _command_10));
                  _builder.append(_compile_4);
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final If i) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Affectation a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("aff");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final While w) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("while");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final For f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("for");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Foreach f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("foreach");
    _builder.newLine();
    return _builder;
  }
  
  public static void init(final List<Integer> integers) {
    integers.add(WhileLanguageGenerator.INDENT_ALL, WhileLanguageGenerator.DEFAULT_ALL);
    integers.add(WhileLanguageGenerator.INDENT_FOR, WhileLanguageGenerator.DEFAULT_FOR);
    integers.add(WhileLanguageGenerator.INDENT_WHILE, WhileLanguageGenerator.DEFAULT_WHILE);
    integers.add(WhileLanguageGenerator.INDENT_IF, WhileLanguageGenerator.DEFAULT_IF);
    integers.add(WhileLanguageGenerator.INDENT_FOREACH, WhileLanguageGenerator.DEFAULT_FOREACH);
  }
  
  public void calcIndent(final List<Integer> integers) {
    for (this.i = 0; (this.i < (this.indentations.get(WhileLanguageGenerator.INDENT_ALL)).intValue()); this.i++) {
      {
        String _indentAll = this.indentAll;
        this.indentAll = (_indentAll + " ");
        String _indentFor = this.indentFor;
        this.indentFor = (_indentFor + " ");
        String _indentWhile = this.indentWhile;
        this.indentWhile = (_indentWhile + " ");
        String _indentIf = this.indentIf;
        this.indentIf = (_indentIf + " ");
        String _indentForeach = this.indentForeach;
        this.indentForeach = (_indentForeach + " ");
      }
    }
    Integer _get = this.indentations.get(WhileLanguageGenerator.INDENT_FOR);
    boolean _notEquals = ((_get).intValue() != (-1));
    if (_notEquals) {
      this.indentFor = "";
    }
    for (this.i = 0; (this.i < (this.indentations.get(WhileLanguageGenerator.INDENT_FOR)).intValue()); this.i++) {
      String _indentFor = this.indentFor;
      this.indentFor = (_indentFor + " ");
    }
    Integer _get_1 = this.indentations.get(WhileLanguageGenerator.INDENT_WHILE);
    boolean _notEquals_1 = ((_get_1).intValue() != (-1));
    if (_notEquals_1) {
      this.indentWhile = "";
    }
    for (this.i = 0; (this.i < (this.indentations.get(WhileLanguageGenerator.INDENT_WHILE)).intValue()); this.i++) {
      String _indentWhile = this.indentWhile;
      this.indentWhile = (_indentWhile + " ");
    }
    Integer _get_2 = this.indentations.get(WhileLanguageGenerator.INDENT_IF);
    boolean _notEquals_2 = ((_get_2).intValue() != (-1));
    if (_notEquals_2) {
      this.indentIf = "";
    }
    for (this.i = 0; (this.i < (this.indentations.get(WhileLanguageGenerator.INDENT_IF)).intValue()); this.i++) {
      String _indentIf = this.indentIf;
      this.indentIf = (_indentIf + " ");
    }
    Integer _get_3 = this.indentations.get(WhileLanguageGenerator.INDENT_FOREACH);
    boolean _notEquals_3 = ((_get_3).intValue() != (-1));
    if (_notEquals_3) {
      this.indentForeach = "";
    }
    for (this.i = 0; (this.i < (this.indentations.get(WhileLanguageGenerator.INDENT_FOREACH)).intValue()); this.i++) {
      String _indentForeach = this.indentForeach;
      this.indentForeach = (_indentForeach + " ");
    }
  }
}
