/**
 * generated by Xtext 2.15.0
 */
package compilation.formatting2;

import com.google.inject.Inject;
import compilation.services.WhileLanguageGrammarAccess;
import compilation.whileLanguage.Definition;
import compilation.whileLanguage.Function;
import compilation.whileLanguage.Program;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class WhileLanguageFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private WhileLanguageGrammarAccess _whileLanguageGrammarAccess;
  
  protected void _format(final Program program, @Extension final IFormattableDocument document) {
    EList<Function> _functions = program.getFunctions();
    for (final Function function : _functions) {
      document.<Function>format(function);
    }
  }
  
  protected void _format(final Function function, @Extension final IFormattableDocument document) {
    document.<Definition>format(function.getDefinition());
  }
  
  public void format(final Object function, final IFormattableDocument document) {
    if (function instanceof XtextResource) {
      _format((XtextResource)function, document);
      return;
    } else if (function instanceof Function) {
      _format((Function)function, document);
      return;
    } else if (function instanceof Program) {
      _format((Program)function, document);
      return;
    } else if (function instanceof EObject) {
      _format((EObject)function, document);
      return;
    } else if (function == null) {
      _format((Void)null, document);
      return;
    } else if (function != null) {
      _format(function, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(function, document).toString());
    }
  }
}
