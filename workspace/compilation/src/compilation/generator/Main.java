/*
 * generated by Xtext 2.15.0
 */
package compilation.generator;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

import compilation.WhileLanguageStandaloneSetup;

public class Main {

	public static void main(String[] args) {
		
		if (args.length < 1) {
			System.err.println("Aborting: no path to EMF resource provided!");
			return;
		}
		Injector injector = new WhileLanguageStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		
		/* TODO : gerer ici le parsing des options
		 * Les valeurs sont à passer via une Map<String, Integer> 
		 * pour les indentations et via String output pour le fichier de sortie du -o.
		 * Definir les clés de la map en "final static indent<Struct>" (indentIf, indentWhile, etc...)
		*/
		String output = "";
		
		main.runGenerator(args[0], output, new HashMap<String, Integer>());
		//TODO décomenté et passer en paramètre la map et input et output
		//main.runGenerator(input, output, indentations);
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private WhileLanguageGenerator generator;

	@Inject 
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String input, String output, Map<String, Integer> indentations) {
		// Load the resource
		System.out.println(input);
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.getResource(URI.createFileURI(input), true);

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}

		// Configure and start the generator
		fileAccess.setOutputPath("./");
		//System.out.println(URI.createFileURI(output).path());
		//fileAccess.setOutputPath(URI.createFileURI(output).path());
		GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);
		generator.doGenerate(resource, fileAccess, context, output, indentations);
		
		System.out.println("Pretty printing done");
	}
}
